import numpy as np

####################   CV Module   #################### 
def get_yolo_img(input_img):
        '''
        Take an image and return the object detection result image by Yolo

        Input:
        - input_img: input image as PIL.Image object

        Expected Output:
        - image with class labels as PIL.Image object or np.array
        - [context] json object for inference
        '''
        ### placeholder for now ###
        input_img = np.asarray(input_img)
        sepia_filter = np.array([
            [0.393, 0.769, 0.189], 
            [0.349, 0.686, 0.168], 
            [0.272, 0.534, 0.131]
        ])
        output_img = input_img.dot(sepia_filter.T)
        output_img /= output_img.max()

        context_json = {}
        ### placeholder for now ###

        return output_img, context_json

####################   NLP Module   ####################
def get_llm_response(message, context):
        '''
        Send a request to LLM and return its response

        Input:
        message: input string from user, typically a question
        context: [context] json object generated by the CV module

        Expected Output:
        LLM generated response as string
        '''
        ### placeholder for now ###
        import random
        response = random.choice(["How are you?", "I love you", "I'm very hungry"])
        ### placeholder for now ###

        return response

####################   TTS Module   ####################
def get_tts_result(message):
        '''
        Convert LLM-generated text to speech

        Input:
        message: LLM generated response as string

        Expected Output:
        audio data as numpy array

        (Note: can also save audio data as local file and return a path)
        '''
        ### placeholder for now ###
        sr = 48000
        duration = 1
        a4_freq, tones_from_a4 = 440, 8
        frequency = a4_freq * 2 ** (tones_from_a4 / 12)
        duration = int(duration)
        audio = np.linspace(0, duration, duration * sr)
        audio = (20000 * np.sin(audio * (2 * np.pi * frequency))).astype(np.int16)
        return sr, audio
        ### placeholder for now ###
